#include <stdio.h>

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
/* Return true (non-zero) if c is a whitespace character
   ('\t' or ' ').
   Zero terminators are not printable (therefore false) */
bool delim_character(char c){
  if (c == '\t' || c == ' ')        //checks if char is tab or space
    return true;
  
  return false;
}

/* Return true (non-zero) if c is a non-whitespace
   character (not tab or space).
   Zero terminators are not printable (therefore false) */
bool non_delim_character(char c){
  if (c != '\t'  || c != ' ')       //checks if char isn't tab or space
    return true;
  
  return false;
}

/* Returns a pointer to the first character of the next
   space-separated word*/
char *word_start(char* str){
  char *string_ptr = str;          //creates pointer to input string
  char *start_ptr = NULL;          //creates pointer set to null
  while(*string_ptr != '\0'){      //traverse till end of string 
    if(*string_ptr == ' '){        //find space and get next character if it isnt end of 
        start_ptr =string_ptr + 1;  //move ptr to next index [i +1] and break out of loop
        break;
    }
    string_ptr++;
  }
  printf("\n what is start pointer right now: %c", *start_ptr);
  return start_ptr;                       //returns pointer
}


/* Returns a pointer to the first space character of the zero
terminated string*/
char *end_word(char* str){ 
  char *whole = str;          //create pointer to point to string                
  char *end_ptr = NULL;       //create pointer set to null
  while(*whole != '\0'){      //traverse till end of string
    if(*whole == ' '){        //if we hit space then we get address of that index 
      end_ptr = whole;      //...and set end pointer to it
      break;
    }
    whole++;
  }
  printf("\nwhat is end pointer right now? space%cbetween?", *end_ptr);
  return end_ptr;             //returns pointer
}
// counts the number of words or tokens
int count_tokens(char* str){
  int count = 0;
  int i = 0;
  while(str[i] != '\0'){                        //traverse till end of string
    if(str[i] == ' ' || str[i + 1] == '\0'){    //if there is a space then add to count
      count++;                                  //if we hit end of string then count+
    }
    i++;
  }
  return count;
}
/* Returns a freshly allocated zero-terminated vector of freshly allocated
   space-separated tokens from zero-terminated str.
   For example, tokenize("hello world string") would result in:
     tokens[0] = "hello"
     tokens[1] = "world"
     tokens[2] = "string"
     tokens[3] = 0
*/
char *copy_str(char *inStr, short len){
  printf("\nlen is %d", len); //print help
  char *cpy = (char*) malloc(len * sizeof(char));       //creates space
  
  for(int i= 0; i < len; i++){                          //traverses till end of len in string
    cpy[i] = *inStr;                                    //copies char over till len of string
    //print help
    printf("\nthe pointer instring is: %c", *inStr);
    inStr++;
  }
  return cpy;
}

char** tokenize(char* str){
  char *temp = str;                     //creates pointer to string
  int word_count = count_tokens(str);   //configures amount of words in input
  char** tokens = (char**)malloc(word_count *sizeof(char*));  //allocates space
  int count = 0;                        //sets index in token array
  int start_char = 0;                   //helps with congfiguring lenght of token
  int end_char = 0;                     //helps with configuring length of token

  while(str[end_char]!= '\0'){          //traverses till end of string
    if(str[end_char] == ' '){           //if we hit space then copy till that space in string
      tokens[count++] = copy_str(str + start_char, end_char - start_char); //..and place in..
      start_char = end_char + 1;                                           //..token array
      end_char = start_char;            //updates start with where end char left off 
    }
    else{
      end_char++;
    }
  }
  tokens[count++] = copy_str(str + start_char, end_char - start_char); //if we hit end of str
  return tokens;                                                       //then copy up to that
}

void print_all_tokens(char** tokens){
  int i = 0;

  while(tokens[i] != NULL){
    printf("Tokens[%d]: %s\n", i, tokens[i]);
    i++;
  }
}

int main(){
    char str[50];
    char *ptr_s;
    char *ptr_e;
    char *ptr_cpy;
    char *ptr_string[50];
    int counter;
    

    printf("Enter string: ");
    fgets(str, sizeof(str), stdin); 
    printf("String Output: ");
    puts(str);

    *ptr_string = str;
    printf("\nthe pointer has: %s", *ptr_string); //<-----this works 
/*
    //checking word start method
    printf("\nchecking word start method.. \n");

    ptr_s = word_start(str);
    printf("\nshould print out w: %c ", *ptr_s);

    //checking if end word method works
    printf("\nchecking if end word method works.....\n");

    ptr_e = end_word(str);
    printf("\nshould printout a space between these two words: meow%cmeow", *ptr_e);

    //checking if count method works
    printf("\nchecking if count method works... \n");

    counter = count_tokens(str);
    printf("\nshould print out 2: %d", counter);

    //checking if copy method works
    printf("\nchecking if copy method works.. \n");

    //calcultating size of startword pointer
    int lenS = sizeof(str)/sizeof(ptr_s);
    //calculating size of endword pointer
    int lenE = sizeof(str)/sizeof(ptr_e) -1;

    printf("\nsize of lenS is: %d  and lenE is: %d", lenS, lenE);

    ptr_cpy = copy_str(*ptr_string, lenE);

    printf("\ncopy method is: %s", ptr_cpy);
  
    //checking if tokenize method works
    printf("\nchecking if tokenize method works....\n"); */

    char** tokens = tokenize(*ptr_string);
    //printing tokens
    printf("\n");
    print_all_tokens(tokens);
    return 0;
}    
